openapi: 3.1.0
info:
  title: Security Schemes API
  description: API demonstrating different security schemes for different paths
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://httpbin.org
    description: Production server

# Global security (applies to all paths unless overridden)
security:
  - apiKey: []

paths:
  # Path with Basic Authentication
  /anything/basic-auth:
    get:
      summary: Get with Basic Authentication
      description: This endpoint requires Basic Authentication
      security:
        - basicAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully authenticated with Basic Auth"
                  user:
                    type: string
                    example: "john_doe"
                  timestamp:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid credentials"
        '403':
          description: Forbidden - Insufficient permissions
    post:
      summary: Post with Basic Authentication
      description: This endpoint requires Basic Authentication for POST requests
      security:
        - basicAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: string
                  example: "Sample data"
              required:
                - data
      responses:
        '200':
          description: Successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Data created successfully"
                  id:
                    type: string
                    example: "12345"

  # Path with Bearer Token (JWT)
  /anything/bearer-token:
    get:
      summary: Get with Bearer Token
      description: This endpoint requires Bearer Token authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully authenticated with Bearer Token"
                  user_id:
                    type: string
                    example: "user_123"
                  permissions:
                    type: array
                    items:
                      type: string
                    example: ["read", "write"]
        '401':
          description: Unauthorized - Invalid token
        '403':
          description: Forbidden - Token expired or insufficient permissions

  # Path with OAuth 2.0
  /anything/oauth2.0:
    get:
      summary: Get with OAuth 2.0
      description: This endpoint requires OAuth 2.0 authentication
      security:
        - oauth2:
            - read:users
            - write:users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully authenticated with OAuth 2.0"
                  scopes:
                    type: array
                    items:
                      type: string
                    example: ["read:users", "write:users"]
                  user_info:
                    type: object
                    properties:
                      id:
                        type: string
                        example: "oauth_user_456"
                      email:
                        type: string
                        example: "user@example.com"
        '401':
          description: Unauthorized - Invalid OAuth token
        '403':
          description: Forbidden - Insufficient OAuth scopes

  # Path with API Key in Header
  /anything/api-key-header:
    get:
      summary: Get with API Key in Header
      description: This endpoint requires API Key in header
      security:
        - apiKeyHeader: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully authenticated with API Key in Header"
                  api_version:
                    type: string
                    example: "v1.0"
                  rate_limit:
                    type: object
                    properties:
                      remaining:
                        type: integer
                        example: 999
                      reset_time:
                        type: string
                        format: date-time
                        example: "2024-01-15T11:00:00Z"
        '401':
          description: Unauthorized - Invalid API key
        '429':
          description: Too Many Requests - Rate limit exceeded

  # Path with API Key in Query
  /anything/api-key-query:
    get:
      summary: Get with API Key in Query
      description: This endpoint requires API Key in query parameter
      security:
        - apiKeyQuery: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully authenticated with API Key in Query"
                  query_params:
                    type: object
                    properties:
                      api_key:
                        type: string
                        example: "***"
                      timestamp:
                        type: string
                        example: "2024-01-15T10:30:00Z"
        '401':
          description: Unauthorized - Invalid API key
        '400':
          description: Bad Request - Missing API key parameter

  # Path with Digest Authentication
  /anything/digest-auth:
    get:
      summary: Get with Digest Authentication
      description: This endpoint requires Digest Authentication
      security:
        - digestAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully authenticated with Digest Auth"
                  realm:
                    type: string
                    example: "Secure Area"
                  nonce:
                    type: string
                    example: "dcd98b7102dd2f0e8b11d0f600bfb0c093"
        '401':
          description: Unauthorized - Invalid digest credentials

  # Path with Mutual TLS
  /anything/mutual-tls:
    get:
      summary: Get with Mutual TLS
      description: This endpoint requires Mutual TLS authentication
      security:
        - mutualTLS: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Successfully authenticated with Mutual TLS"
                  certificate_info:
                    type: object
                    properties:
                      subject:
                        type: string
                        example: "CN=client.example.com"
                      issuer:
                        type: string
                        example: "CN=CA.example.com"
                      valid_until:
                        type: string
                        format: date-time
                        example: "2025-01-15T10:30:00Z"
        '401':
          description: Unauthorized - Invalid client certificate

  # Path with no security (uses global security)
  /anything/public:
    get:
      summary: Get public endpoint
      description: This endpoint uses global security (API Key)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Public endpoint accessed successfully"
                  public_data:
                    type: object
                    properties:
                      version:
                        type: string
                        example: "1.0.0"
                      status:
                        type: string
                        example: "operational"
                      timestamp:
                        type: string
                        format: date-time
                        example: "2024-01-15T10:30:00Z"
        '401':
          description: Unauthorized - Missing API key
    post:
      summary: Post to public endpoint
      description: This endpoint uses global security (API Key)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                public_message:
                  type: string
                  example: "Hello from public endpoint"
              required:
                - public_message
      responses:
        '200':
          description: Successfully processed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Message processed successfully"
                  received_at:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"

# Security Schemes
components:
  securitySchemes:
    # Basic Authentication
    basicAuth:
      type: http
      scheme: basic
      description: Basic authentication using username and password

    # Bearer Token (JWT)
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer token authentication using JWT

    # OAuth 2.0
    oauth2:
      type: oauth2
      description: OAuth 2.0 authentication
      flows:
        authorizationCode:
          authorizationUrl: https://dev-3jc1owmgnpvencur.us.auth0.com/authorize
          tokenUrl: https://dev-3jc1owmgnpvencur.us.auth0.com/oauth/token
          scopes:
            read:users: Read user information
            write:users: Write user information
            read:posts: Read posts
            write:posts: Write posts
        clientCredentials:
          tokenUrl: https://dev-3jc1owmgnpvencur.us.auth0.com/oauth/token
          scopes:
            read:users: Read user information
            write:users: Write user information
        implicit:
          authorizationUrl: https://dev-3jc1owmgnpvencur.us.auth0.com/authorize
          scopes:
            read:users: Read user information
            write:users: Write user information

    # API Key in Header
    apiKeyHeader:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key passed in header

    # API Key in Query
    apiKeyQuery:
      type: apiKey
      in: query
      name: api_key
      description: API key passed in query parameter

    # Global API Key (used by default)
    apiKey:
      type: apiKey
      in: header
      name: Authorization
      description: Global API key for endpoints without specific security

    # Digest Authentication
    digestAuth:
      type: http
      scheme: digest
      description: Digest authentication

    # Mutual TLS
    mutualTLS:
      type: mutualTLS
      description: Mutual TLS authentication using client certificates

# Tags for better organization
tags:
  - name: Authentication
    description: Endpoints demonstrating different authentication methods
  - name: Public
    description: Public endpoints using global security 
