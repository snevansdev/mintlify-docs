openapi: 3.0.3
info:
  title: Query Parameter Object API
  description: API demonstrating various query parameter object scenarios
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Production server

paths:
  /scenario1:
    get:
      summary: Query parameter containing an object
      description: Scenario 1 - Query parameter that contains an object
      operationId: getScenario1
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: object
            properties:
              name:
                type: string
                description: Filter by name
              age:
                type: integer
                description: Filter by age
              active:
                type: boolean
                description: Filter by active status
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /scenario2:
    get:
      summary: Query parameter containing object and regular parameters with name collision
      description: Scenario 2 - Query parameter that contains object and regular parameters with name collision
      operationId: getScenario2
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name filter in object
              category:
                type: string
                description: Category filter in object
        - name: name
          in: query
          required: false
          schema:
            type: string
            description: Regular name parameter (collides with filter.name)
        - name: sort
          in: query
          required: false
          schema:
            type: string
            description: Sort parameter
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /scenario3:
    get:
      summary: Query parameter referencing a data model
      description: Scenario 3 - Query parameter that references a data model
      operationId: getScenario3
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterModel'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /scenario4:
    get:
      summary: Query parameter referencing data model with name collision
      description: Scenario 4 - Query parameter referencing data model with regular parameter name collision
      operationId: getScenario4
      parameters:
        - name: filter
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/FilterModel'
        - name: status
          in: query
          required: false
          schema:
            type: string
            description: Regular status parameter (collides with filter.status)
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            description: Limit parameter
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /scenario5:
    get:
      summary: Query parameters with multiple objects having field name collisions
      description: Scenario 5 - Query parameters containing multiple objects with field name collisions
      operationId: getScenario5
      parameters:
        - name: userFilter
          in: query
          required: false
          schema:
            type: object
            properties:
              id:
                type: string
                description: User ID
              name:
                type: string
                description: User name
              status:
                type: string
                description: User status
        - name: productFilter
          in: query
          required: false
          schema:
            type: object
            properties:
              id:
                type: string
                description: Product ID (collides with userFilter.id)
              name:
                type: string
                description: Product name (collides with userFilter.name)
              price:
                type: number
                description: Product price
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /scenario6:
    get:
      summary: Query parameters referencing multiple data models with field name collisions
      description: Scenario 6 - Query parameters referencing multiple data models with field name collisions
      operationId: getScenario6
      parameters:
        - name: userFilter
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/UserFilterModel'
        - name: orderFilter
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/OrderFilterModel'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    FilterModel:
      type: object
      properties:
        name:
          type: string
          description: Name filter
        status:
          type: string
          description: Status filter
        date:
          type: string
          format: date
          description: Date filter

    UserFilterModel:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          description: User email
        createdAt:
          type: string
          format: date-time
          description: User creation date

    OrderFilterModel:
      type: object
      properties:
        id:
          type: string
          description: Order ID (collides with UserFilterModel.id)
        status:
          type: string
          description: Order status
        createdAt:
          type: string
          format: date-time
          description: Order creation date (collides with UserFilterModel.createdAt)
