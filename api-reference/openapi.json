openapi: 3.1.0
info:
  title: Multi-Media-Type API
  description: API with multiple endpoints supporting different media types
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server

paths:
  /users:
    post:
      summary: Get users list
      description: Retrieve a list of users with JSON response
      operationId: getUsers
      tags:
        - Users
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: object
                  description: Optional filters for user search
                  properties:
                    name:
                      type: string
                      description: Filter by user name
                    email:
                      type: string
                      format: email
                      description: Filter by email address
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
              examples:
                success:
                  summary: Success response
                  value:
                    data:
                      - id: 1
                        name: "John Doe"
                        email: "john@example.com"
                        created_at: "2024-01-15T10:30:00Z"
                      - id: 2
                        name: "Jane Smith"
                        email: "jane@example.com"
                        created_at: "2024-01-16T14:20:00Z"
                    pagination:
                      page: 1
                      limit: 20
                      total: 2
                      total_pages: 1
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /products:
    post:
      summary: Create a new product
      description: Create a new product with support for multiple media types
      operationId: createProduct
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductCreate'
            examples:
              basic:
                summary: Basic product
                value:
                  name: "Sample Product"
                  description: "A sample product description"
                  price: 29.99
                  category: "electronics"
              detailed:
                summary: Detailed product
                value:
                  name: "Premium Product"
                  description: "A premium product with detailed specifications"
                  price: 99.99
                  category: "electronics"
                  specifications:
                    weight: "500g"
                    dimensions: "10x5x2cm"
                    color: "Black"
          application/xml:
            schema:
              type: string
              format: xml
            examples:
              xml_product:
                summary: XML product data
                value: |
                  <?xml version="1.0" encoding="UTF-8"?>
                  <product>
                    <name>XML Product</name>
                    <description>Product created via XML</description>
                    <price>45.50</price>
                    <category>books</category>
                  </product>
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Product name
                description:
                  type: string
                  description: Product description
                price:
                  type: number
                  format: float
                  description: Product price
                category:
                  type: string
                  enum: ["electronics", "clothing", "books", "home", "sports"]
                  description: Product category
                image:
                  type: string
                  format: binary
                  description: Product image file
            examples:
              form_data:
                summary: Form data with file upload
                value:
                  name: "Form Product"
                  description: "Product created via form data"
                  price: 25.99
                  category: "electronics"
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: string
                format: xml
            multipart/form-data:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  product_id:
                    type: integer
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /orders:
    put:
      summary: Update order status
      description: Update order status with custom media types
      operationId: updateOrderStatus
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/vnd.api+json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
            examples:
              status_update:
                summary: JSON:API format
                value:
                  data:
                    type: "order"
                    id: "ORD12345"
                    attributes:
                      status: "shipped"
                      tracking_number: "TRK789012"
                      updated_at: "2024-01-20T09:15:00Z"
          application/vnd.company.order+json:
            schema:
              type: object
              properties:
                order_status:
                  type: string
                  enum: ["pending", "processing", "shipped", "delivered", "cancelled"]
                metadata:
                  type: object
                  additionalProperties: true
            examples:
              company_format:
                summary: Company-specific format
                value:
                  order_status: "shipped"
                  metadata:
                    warehouse_id: "WH001"
                    shipping_method: "express"
                    estimated_delivery: "2024-01-22"
          application/vnd.legacy.order+xml:
            schema:
              type: string
              format: xml
            examples:
              legacy_xml:
                summary: Legacy XML format
                value: |
                  <?xml version="1.0" encoding="UTF-8"?>
                  <orderUpdate>
                    <orderId>ORD12345</orderId>
                    <status>shipped</status>
                    <timestamp>2024-01-20T09:15:00Z</timestamp>
                    <notes>Package picked up by courier</notes>
                  </orderUpdate>
      responses:
        '200':
          description: Order status updated successfully
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
            application/vnd.company.order+json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  order:
                    $ref: '#/components/schemas/Order'
                  updated_at:
                    type: string
                    format: date-time
            application/vnd.legacy.order+xml:
              schema:
                type: string
                format: xml
        '404':
          description: Order not found
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Invalid status transition
          content:
            application/vnd.api+json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      required:
        - id
        - name
        - email
      properties:
        id:
          type: integer
          description: Unique user identifier
        name:
          type: string
          description: User's full name
          minLength: 1
          maxLength: 100
        email:
          type: string
          format: email
          description: User's email address
        created_at:
          type: string
          format: date-time
          description: User creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - total_pages
      properties:
        page:
          type: integer
          minimum: 1
          description: Current page number
        limit:
          type: integer
          minimum: 1
          description: Items per page
        total:
          type: integer
          minimum: 0
          description: Total number of items
        total_pages:
          type: integer
          minimum: 0
          description: Total number of pages

    Product:
      type: object
      required:
        - id
        - name
        - price
        - category
      properties:
        id:
          type: integer
          description: Unique product identifier
        name:
          type: string
          description: Product name
          minLength: 1
          maxLength: 200
        description:
          type: string
          description: Product description
          maxLength: 1000
        price:
          type: number
          format: float
          minimum: 0
          description: Product price
        category:
          type: string
          description: Product category
          enum: ["electronics", "clothing", "books", "home", "sports"]
        specifications:
          type: object
          additionalProperties: true
          description: Product specifications
        created_at:
          type: string
          format: date-time
          description: Product creation timestamp

    ProductCreate:
      type: object
      required:
        - name
        - price
        - category
      properties:
        name:
          type: string
          description: Product name
          minLength: 1
          maxLength: 200
        description:
          type: string
          description: Product description
          maxLength: 1000
        price:
          type: number
          format: float
          minimum: 0
          description: Product price
        category:
          type: string
          description: Product category
          enum: ["electronics", "clothing", "books", "home", "sports"]
        specifications:
          type: object
          additionalProperties: true
          description: Product specifications

    Order:
      type: object
      required:
        - id
        - user_id
        - status
        - total_amount
      properties:
        id:
          type: string
          pattern: '^[A-Z0-9]{8}$'
          description: Order identifier
        user_id:
          type: integer
          description: User who placed the order
        status:
          type: string
          enum: ["pending", "processing", "shipped", "delivered", "cancelled"]
          description: Current order status
        total_amount:
          type: number
          format: float
          minimum: 0
          description: Total order amount
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        created_at:
          type: string
          format: date-time
          description: Order creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    OrderItem:
      type: object
      required:
        - product_id
        - quantity
        - unit_price
      properties:
        product_id:
          type: integer
          description: Product identifier
        quantity:
          type: integer
          minimum: 1
          description: Quantity ordered
        unit_price:
          type: number
          format: float
          minimum: 0
          description: Unit price at time of order

    OrderStatusUpdate:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - id
            - attributes
          properties:
            type:
              type: string
              const: "order"
            id:
              type: string
              pattern: '^[A-Z0-9]{8}$'
            attributes:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: ["pending", "processing", "shipped", "delivered", "cancelled"]
                tracking_number:
                  type: string
                  description: Shipping tracking number
                updated_at:
                  type: string
                  format: date-time

    OrderResponse:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          required:
            - type
            - id
            - attributes
          properties:
            type:
              type: string
              const: "order"
            id:
              type: string
            attributes:
              $ref: '#/components/schemas/Order'

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Error code
            message:
              type: string
              description: Error message
            details:
              type: object
              additionalProperties: true
              description: Additional error details

    ValidationError:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
            - validation_errors
          properties:
            code:
              type: string
              const: "VALIDATION_ERROR"
            message:
              type: string
              description: Validation error message
            validation_errors:
              type: array
              items:
                type: object
                required:
                  - field
                  - message
                properties:
                  field:
                    type: string
                    description: Field that failed validation
                  message:
                    type: string
                    description: Validation error message
                  value:
                    description: Invalid value that was provided

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token for API authentication

security:
  - BearerAuth: []

tags:
  - name: Users
    description: User management operations
  - name: Products
    description: Product management operations
  - name: Orders
    description: Order management operations 
